replicaCount: 3

strategy:
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 0
  type: RollingUpdate

image:
  repository: 738575627980.dkr.ecr.ap-northeast-1.amazonaws.com/gaudi-poc/gaudi-poc-api-server
  tag: latest
  pullPolicy: Always

scala:
  port: 8080

  extraPorts:
  - name: remoting
    containerPort: 2551
    protocol: TCP
  - name: management
    containerPort: 8558
    protocol: TCP

  env:
  - name: AWS_REGION
    value: "ap-northeast-1"
  - name: HOSTNAME
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: status.podIP
  - name: DATADOG_HOSTNAME
    valueFrom:
     fieldRef:
       fieldPath: status.hostIP

  akka:
    nodes: 3
    port: 2551

  configmaps:
    application-conf:
      /opt/api-server/akka.conf: |
        akka {
          cluster.downing-provider-class = "tanukki.akka.cluster.autodown.OldestAutoDowning"

          custom-downing {
            stable-after = 20s

            oldest-auto-downing {
              oldest-member-role = ""
              down-if-alone = true
            }
          }

          cluster {
            auto-down-unreachable-after = off
            seed-nodes = {{ .Values.scala.akka.nodes }}
          }

          remote {
            log-remote-lifecycle-events = on
            netty.tcp {
              hostname = "127.0.0.1"
              hostname = ${?HOSTNAME}
              port = {{ .Values.scala.akka.port }}
              bind-hostname = "0.0.0.0"
            }
          }

          discovery {
            method = kubernetes-api
            method = ${?GAUDI_POC_DISCOVERY_METHOD}
            kubernetes-api {
              pod-namespace = "gaudi-poc"
              pod-namespace = ${?GAUDI_POC_K8S_NAMESPACE}
              pod-label-selector = "app=gaudi-poc-api-server"
              pod-label-selector = ${?GAUDI_POC_K8S_SELECTOR}
              pod-port-name = "management"
              pod-port-name = ${?GAUDI_POC_K8S_MANAGEMENT_PORT}
            }
          }

          management {
            http {
              hostname = "127.0.0.1"
              hostname = ${?HOSTNAME}
              port = 8558
              port = ${?GAUDI_POC_MANAGEMENT_PORT}
              bind-hostname = 0.0.0.0
              bind-port = 8558
            }
            cluster.bootstrap {
              contact-point-discovery {
                discovery-method = kubernetes-api
              }
            }
            contract-point {
              fallback-port = 8558
            }
          }
        }

        akka {
          persistence {
            journal {
              plugin = dynamo-db-journal
            }
            snapshot-store {
              plugin = dynamo-db-snapshot
            }
          }
        }

        dynamo-db-journal {
          shard-count = 64
          dynamodb-client {
            max-concurrency = 128
            max-pending-connection-acquires = 10000
            read-timeout = 5 s
            write-timeout = 5 s
            connection-acquisition-timeout = 5 s
            connection-timeout = 5 s
            connection-time-to-live = 5 s
            max-idle-connection-timeout = 5 s
            use-connection-reaper = true
            threads-of-event-loop-group = 32
          }
        }

        dynamo-db-snapshot {
          dynamodb-client {
            max-concurrency = 128
            max-pending-connection-acquires = 10000
            read-timeout = 5 s
            write-timeout = 5 s
            connection-acquisition-timeout = 5 s
            connection-timeout = 5 s
            connection-time-to-live = 5 s
            max-idle-connection-timeout = 5 s
            use-connection-reaper = true
            threads-of-event-loop-group = 32
          }
        }

        dynamo-db-read-journal {
          dynamodb-client {
            max-concurrency = 128
            max-pending-connection-acquires = 10000
            read-timeout = 5 s
            write-timeout = 5 s
            connection-acquisition-timeout = 5 s
            connection-timeout = 5 s
            connection-time-to-live = 5 s
            max-idle-connection-timeout = 5 s
            use-connection-reaper = true
            threads-of-event-loop-group = 32
          }
        }

  livenessProbe:
    httpGet:
      path: /live
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 6

service:
  type: LoadBalancer